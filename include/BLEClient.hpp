/*******************************************************************************
 * @file BLEClient.hpp
 * @brief Contains declarations for BLE client functionality including scanning,
 * connecting, and data communication with BLE servers.
 *
 * @version 0.0.6
 * @date 2025-06-26
 * @author isa@sense-ai.co
 *******************************************************************************
 *******************************************************************************/

#pragma once

#include "BLEConfigs.hpp"

/**
 * @enum ble_client_state_t
 * @brief States specific to BLE client operations
 */
typedef enum {
    BLE_CLIENT_IDLE,            ///< Client is idle
    BLE_CLIENT_SCANNING,        ///< Client is scanning for servers
    BLE_CLIENT_CONNECTING,      ///< Client is connecting to a server
    BLE_CLIENT_CONNECTED,       ///< Client is connected to a server
    BLE_CLIENT_DISCOVERING,     ///< Client is discovering services
    BLE_CLIENT_AUTHENTICATING,  ///< Client is authenticating with server
    BLE_CLIENT_READY,          ///< Client is ready for data operations
    BLE_CLIENT_DISCONNECTING   ///< Client is disconnecting
} ble_client_state_t;

/**
 * @enum ble_client_event_t
 * @brief Events that can be generated by the BLE client
 */
typedef enum {
    BLE_CLIENT_EVENT_SCAN_STARTED,      ///< Scan operation started
    BLE_CLIENT_EVENT_DEVICE_FOUND,      ///< Target device found during scan
    BLE_CLIENT_EVENT_SCAN_COMPLETED,    ///< Scan operation completed
    BLE_CLIENT_EVENT_CONNECTED,         ///< Connected to server
    BLE_CLIENT_EVENT_DISCONNECTED,      ///< Disconnected from server
    BLE_CLIENT_EVENT_AUTHENTICATED,     ///< Successfully authenticated
    BLE_CLIENT_EVENT_DATA_RECEIVED,     ///< Data received from server
    BLE_CLIENT_EVENT_ERROR             ///< Error occurred
} ble_client_event_t;

/**
 * @struct ble_client_config_t
 * @brief Configuration structure for BLE client
 */
typedef struct {
    esp_bd_addr_t targetServerMACadd;                ///< MAC address of target server
    char targetDeviceName[BLE_MAX_DEVICE_NAME_LEN];  ///< Name of target server device
    uint32_t scanTimeout;                          ///< Scan timeout in milliseconds
    bool autoReconnect;                               ///< Enable automatic reconnection
    uint32_t reconnectInterval;                    ///< Interval between reconnection attempts MS
    uint32_t connectionTimeout;                    ///< Connection attempt timeout MS
    bool enableNotifications;                         ///< Enable server notifications
    uint32_t readInterval;                        ///< Interval for automatic data reading MS
} ble_client_config_t;

/**
 * @struct ble_client_stats_t
 * @brief Statistics for BLE client operations
 */
typedef struct {
    uint32_t scanCount;                ///< Number of scans performed
    uint32_t connectionAttempts;       ///< Number of connection attempts
    uint32_t successfulConnections;    ///< Number of successful connections
    uint32_t dataReceived;             ///< Number of data packets received
    uint32_t dataSent;                 ///< Number of data packets sent
    uint32_t disconnections;           ///< Number of disconnections
    uint64_t totalUptime;              ///< Total connected time MS
    uint64_t lastConnectionTime;       ///< Timestamp of last connection
} ble_client_stats_t;

/**
 * @brief Callback for when client connects to a server
 * @param deviceInfo Information about the connected device
 */
typedef void (*ble_client_connected_cb_t)(const ble_device_info_t* deviceInfo);

/**
 * @brief Callback for when client disconnects from server
 * @param reason Disconnection reason code
 * @param wasPlanned True if disconnection was planned, false if unexpected
 */
typedef void (*ble_client_disconnected_cb_t)(int reason, bool wasPlanned);

/**
 * @brief Callback for when data is received from server
 * @param data Pointer to received data packet
 */
typedef void (*ble_client_data_received_cb_t)(const ble_data_packet_t* data);

/**
 * @brief Callback for when a target device is found during scanning
 * @param deviceInfo Information about the found device
 * @param _shouldConnect Output parameter - set to true to connect to this device
 */
typedef void (*ble_client_device_found_cb_t)(const ble_device_info_t* deviceInfo, 
                                              bool* _shouldConnect);

/**
 * @brief Callback for authentication events
 * @param success True if authentication was successful
 * @param errorCode Error code if authentication failed
 */
typedef void (*ble_client_auth_cb_t)(bool success, esp_err_t errorCode);

/**
 * @brief Callback for when any BLE device is detected during scanning
 * @param deviceInfo Information about the found device
 * @param isTarget True if it's the target device, false if it's another device
 */
typedef void (*ble_client_any_device_found_cb_t)(const ble_device_info_t* deviceInfo, 
                                                  bool isTarget);

/**
 * @brief Callback for when a scan starts
 * @param scanDuration Scan duration in milliseconds
 */
typedef void (*ble_client_scan_started_cb_t)(uint32_t scanDuration);

/**
 * @brief Callback for when a scan completes
 * @param devicesFound Total number of devices found
 * @param targetFound True if target device was found
 */
typedef void (*ble_client_scan_completed_cb_t)(uint32_t devicesFound, 
                                                bool targetFound);

/**
 * @brief BLE Client class for connecting to and communicating with BLE servers
 * 
 * This class provides a high-level interface for BLE client operations including
 * scanning for devices, connecting to servers, authenticating, and exchanging data.
 * It supports automatic reconnection, security features, and statistics tracking.
 */
class BLEClient {
public:
    /**
     * @brief Constructs a new BLEClient object with default settings
     */
    BLEClient();

    /**
     * @brief Constructs a new BLEClient object with custom configuration
     * @param config Initial configuration for the client
     */
    BLEClient(const ble_client_config_t& config);

    /**
     * @brief Destroys the BLEClient object and cleans up resources
     */
    virtual ~BLEClient();

    /**
     * @brief Initializes the BLE client
     * 
     * Sets up the BLE client with the current configuration. Must be called
     * before any other client operations.
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t init();

    /**
     * @brief Starts scanning for BLE servers
     * 
     * Begins scanning for BLE devices matching the target device name.
     * Calls the device found callback when a matching device is discovered.
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t startScan();

    /**
     * @brief Stops the current scanning operation
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t stopScan();

    /**
     * @brief Sets the target device for scanning
     * 
     * @param _serverMACadd MAC address of the target device to search for
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t setMacTarget(const esp_bd_addr_t _serverMACadd);

    /**
     * @brief Connects to a specific BLE server
     * 
     * @param serverMACadd MAC address of the server to connect to
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t connect(const esp_bd_addr_t serverMACadd);

    /**
     * @brief Disconnects from the current server
     * 
     * @param planned True if this is a planned disconnection
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t disconnect(bool planned = true);

    /**
     * @brief Reads battery level from the connected server
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t readBatteryLevel();

    /**
     * @brief Reads custom data from the connected server
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t readCustomData();

    /**
     * @brief Writes custom data to the connected server
     * 
     * @param data Data string to write
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t writeCustomData(const char* data);

    /**
     * @brief Enables or disables notifications from the server
     * 
     * @param enable True to enable notifications, false to disable
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t setNotifications(bool enable);

    /**
     * @brief Updates the client configuration
     * 
     * @param config New configuration to apply
     * @return esp_err_t ESP_OK on success, error code otherwise
     * @note Call init() after changing configuration
     */
    esp_err_t setConfig(const ble_client_config_t& config);

    /**
     * @brief Gets the current client configuration
     * 
     * @return ble_client_config_t Current configuration
     */
    ble_client_config_t getConfig() const;

    /**
     * @brief Sets the target device name to search for
     * 
     * @param deviceName Name of the target device
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t setTargetDevice(const char* deviceName);

    /**
     * @brief Registers callback for connection events
     * 
     * @param callback Function to call when connected to a server
     */
    void setConnectedCallback(ble_client_connected_cb_t callback);

    /**
     * @brief Registers callback for disconnection events
     * 
     * @param callback Function to call when disconnected from server
     */
    void setDisconnectedCallback(ble_client_disconnected_cb_t callback);

    /**
     * @brief Registers callback for data reception events
     * 
     * @param callback Function to call when data is received
     */
    void setDataReceivedCallback(ble_client_data_received_cb_t callback);

    /**
     * @brief Registers callback for device discovery events
     * 
     * @param callback Function to call when target device is found
     */
    void setDeviceFoundCallback(ble_client_device_found_cb_t callback);

    /**
     * @brief Registers callback for authentication events
     * 
     * @param callback Function to call for authentication events
     */
    void setAuthCallback(ble_client_auth_cb_t callback);

    /**
     * @brief Registers callback to detect ANY BLE device during scanning
     * 
     * This callback is executed for ALL detected BLE devices,
     * not just the target device.
     * 
     * @param callback Function to call when any device is detected
     */
    void setAnyDeviceFoundCallback(ble_client_any_device_found_cb_t callback);

    /**
     * @brief Registers callback for when a scan starts
     * 
     * @param callback Function to call when a scan begins
     */
    void setScanStartedCallback(ble_client_scan_started_cb_t callback);

    /**
     * @brief Registers callback for when a scan completes
     * 
     * @param callback Function to call when a scan ends
     */
    void setScanCompletedCallback(ble_client_scan_completed_cb_t callback);

    /**
     * @brief Starts a "show all" scan without target device filter
     * 
     * In this mode, the client will scan and report ALL found BLE devices
     * without attempting to connect to any of them.
     * 
     * @param duration Scan duration in milliseconds
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t startDiscoveryScan(uint32_t duration = 15000);

    /**
     * @brief Starts a filtered scan looking only for the target device
     * 
     * This is the normal scan mode that specifically searches for the device
     * configured in target_device_name.
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t startTargetedScan();

    /**
     * @brief Sets the scan mode (discovery vs targeted)
     * 
     * @param discoveryMode True for discovery mode (show all), false for targeted mode
     */
    void setScanMode(bool discoveryMode);

    /**
     * @brief Gets the number of unique devices found in the current session
     * 
     * @return uint32_t Number of unique devices detected
     */
    uint32_t getUniqueDevicesFound() const;

    /**
     * @brief Clears the list of found devices
     */
    void clearDeviceList();

    /**
     * @brief Gets information about a found device by index
     * 
     * @param index Device index (0 to getUniqueDevicesFound()-1)
     * @return ble_device_info_t* Pointer to device info, nullptr if invalid index
     */
    const ble_device_info_t* getFoundDevice(uint32_t index) const;

    /**
     * @brief Gets the current client state
     * 
     * @return ble_client_state_t Current state
     */
    ble_client_state_t getState() const;

    /**
     * @brief Checks if client is currently connected to a server
     * 
     * @return bool True if connected, false otherwise
     */
    bool isConnected() const;

    /**
     * @brief Checks if client is currently scanning
     * 
     * @return bool True if scanning, false otherwise
     */
    bool isScanning() const;

    /**
     * @brief Gets information about the currently connected device
     * 
     * @return ble_device_info_t* Pointer to device info, nullptr if not connected
     */
    const ble_device_info_t* getConnectedDevice() const;

    /**
     * @brief Gets the last received data packet
     * 
     * @return ble_data_packet_t* Pointer to last data, nullptr if no data received
     */
    const ble_data_packet_t* getLastData() const;

    /**
     * @brief Gets client operation statistics
     * 
     * @return ble_client_stats_t Current statistics
     */
    ble_client_stats_t getStats() const;

    /**
     * @brief Resets client statistics
     */
    void resetStats();

    /**
     * @brief Gets a string representation of the current state
     * 
     * @return const char* State string
     */
    const char* getStateString() const;

    /**
     * @brief Gets connection quality based on RSSI
     * 
     * @return uint8_t Quality percentage (0-100%), 0 if not connected
     */
    uint8_t getConnectionQuality() const;

    /**
     * @brief Gets connection uptime in milliseconds
     * 
     * @return uint64_t Uptime in milliseconds, 0 if not connected
     */
    uint64_t getConnectionUptime() const;

    /**
     * @brief Performs a health check of the client
     * 
     * @return bool True if client is healthy, false otherwise
     */
    bool performHealthCheck();

protected:
    /**
     * @brief Internal GAP callback handler
     * 
     * @param event GAP event type
     * @param param Event parameters
     */
    static void gapCallback(esp_gap_ble_cb_event_t event, 
                           esp_ble_gap_cb_param_t *param);

    /**
     * @brief Internal GATTC callback handler
     * 
     * @param event GATTC event type
     * @param gattCInter GATT client interface
     * @param param Event parameters
     */
    static void gattcCallback(esp_gattc_cb_event_t event, esp_gatt_if_t gattCInter, 
                             esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Verifies if a discovered device matches our target
     * 
     * @param scanResult Scan result data
     * @return bool True if device is verified as target
     */
    bool verifyTargetDevice(esp_ble_gap_cb_param_t *scanResult);

    /**
     * @brief Handles authentication with the server
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t authenticateWithServer();

    /**
     * @brief Internal task for automatic data reading
     * 
     * @param pvParameters Task parameters
     */
    static void dataReadTask(void *pvParameters);

    /**
     * @brief Internal task for reconnection attempts
     * 
     * @param pvParameters Task parameters
     */
    static void reconnectTask(void *pvParameters);

    /**
     * @brief Handles scan result events
     * 
     * @param param GAP callback parameters
     */
    void handleScanResult(esp_ble_gap_cb_param_t *param);

    /**
     * @brief Handles connection events
     * 
     * @param param GATTC callback parameters
     */
    void handleConnect(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles disconnection events
     * 
     * @param param GATTC callback parameters
     */
    void handleDisconnect(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles service found events
     * 
     * @param param GATTC callback parameters
     */
    void handleServiceFound(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles service discovery complete events
     * 
     * @param param GATTC callback parameters
     */
    void handleServiceDiscoveryComplete(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles characteristic found events
     * 
     * @param param GATTC callback parameters
     */
    void handleCharacteristicFound(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles all characteristics found events
     * 
     * @param param GATTC callback parameters
     */
    void handleAllCharacteristicsFound(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles characteristic read events
     * 
     * @param param GATTC callback parameters
     */
    void handleCharacteristicRead(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles characteristic write events
     * 
     * @param param GATTC callback parameters
     */
    void handleCharacteristicWrite(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles notification events
     * 
     * @param param GATTC callback parameters
     */
    void handleNotification(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Add device to the list of found devices (if it doesn't already exist)
     * 
     * @param deviceInfo Information about the device to add
     * @return bool True if added (new), false if already existed
     */
    bool addToFoundDevices(const ble_device_info_t* deviceInfo);

    /**
     * @brief Verify if a device is already in the list of found devices
     * 
     * @param macAddress MAC address of the device
     * @return bool True if already in the list, false if new
     */
    bool isDeviceAlreadyFound(const esp_bd_addr_t macAddress) const;

private:
    ble_client_config_t config_;                   ///< Client configuration
    ble_client_state_t state_;                     ///< Current client state
    ble_security_config_t securityConfig_;        ///< Security configuration
    
    esp_gatt_if_t gattCInter_;                     ///< GATT client interface
    uint16_t connID_;                              ///< Connection ID
    ble_device_info_t connectedDevice_;            ///< Currently connected device info
    ble_data_packet_t lastData_;                   ///< Last received data
    ble_client_stats_t stats_;                     ///< Operation statistics
    
    // Service and characteristic handles
    uint16_t serviceStartHandle_;                  ///< Service start handle
    uint16_t serviceEndHandle_;                    ///< Service end handle
    uint16_t batteryCharHandle_;                   ///< Battery characteristic handle
    uint16_t customCharHandle_;                    ///< Custom characteristic handle

    // Callbacks
    ble_client_connected_cb_t connectedCB_;        ///< Connection callback
    ble_client_disconnected_cb_t disconnectedCB_; ///< Disconnection callback
    ble_client_data_received_cb_t dataReceivedCB_; ///< Data received callback
    ble_client_device_found_cb_t deviceFoundCB_;   ///< Device found callback
    ble_client_auth_cb_t authCB_;                  ///< Authentication callback
    
    // Task handles
    TaskHandle_t dataReadTaskHandle_;              ///< Data reading task handle
    TaskHandle_t reconnectTaskHandle_;             ///< Reconnection task handle
    
    // Synchronization
    SemaphoreHandle_t stateMutex_;                 ///< State protection mutex
    
    // Timing
    uint64_t connectionStartTime_;                 ///< Connection start timestamp
    uint64_t lastDataTime_;                        ///< Last data received timestamp

    // Static instance for callbacks
    static BLEClient* s_instance;                  ///< Static instance for C callbacks

    // Extended callbacks
    ble_client_any_device_found_cb_t anyDeviceFoundCB_;     ///< Callback for any device
    ble_client_scan_started_cb_t scanStartedCB_;            ///< Scan start callback
    ble_client_scan_completed_cb_t scanCompletedCB_;        ///< Scan completion callback

    // Scan mode control
    bool discoveryMode_;                                    ///< True for discovery mode, false for targeted
    uint32_t currentScanDuration_;                         ///< Current scan duration
    uint64_t scanStartTime_;                               ///< Current scan start time

    // List of found devices
    static const uint32_t kMaxFoundDevices = 50;
    ble_device_info_t foundDevices_[kMaxFoundDevices];     ///< List of found devices
    uint32_t foundDevicesCount_;                           ///< Number of unique devices found
    bool targetDeviceFoundInScan_;                         ///< Flag if target was found in current scan
};