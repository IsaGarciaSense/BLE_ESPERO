/*******************************************************************************
 * @file BLEClient.hpp
 * @brief Contains declarations for BLE client functionality including scanning,
 * connecting, and data communication with BLE servers.
 *
 * @version 0.0.1
 * @date 2025-06-15
 * @author isa@sense-ai.co
 *******************************************************************************
 *******************************************************************************/

#pragma once

#include "BLEConfigs.hpp"

/******************************************************************************/
/*                                   Enums                                    */
/******************************************************************************/

/**
 * @enum ble_client_state_t
 * @brief States specific to BLE client operations
 */
typedef enum {
    BLE_CLIENT_IDLE,            ///< Client is idle
    BLE_CLIENT_SCANNING,        ///< Client is scanning for servers
    BLE_CLIENT_CONNECTING,      ///< Client is connecting to a server
    BLE_CLIENT_CONNECTED,       ///< Client is connected to a server
    BLE_CLIENT_DISCOVERING,     ///< Client is discovering services
    BLE_CLIENT_AUTHENTICATING,  ///< Client is authenticating with server
    BLE_CLIENT_READY,          ///< Client is ready for data operations
    BLE_CLIENT_DISCONNECTING   ///< Client is disconnecting
} ble_client_state_t;

/**
 * @enum ble_client_event_t
 * @brief Events that can be generated by the BLE client
 */
typedef enum {
    BLE_CLIENT_EVENT_SCAN_STARTED,      ///< Scan operation started
    BLE_CLIENT_EVENT_DEVICE_FOUND,      ///< Target device found during scan
    BLE_CLIENT_EVENT_SCAN_COMPLETED,    ///< Scan operation completed
    BLE_CLIENT_EVENT_CONNECTED,         ///< Connected to server
    BLE_CLIENT_EVENT_DISCONNECTED,      ///< Disconnected from server
    BLE_CLIENT_EVENT_AUTHENTICATED,     ///< Successfully authenticated
    BLE_CLIENT_EVENT_DATA_RECEIVED,     ///< Data received from server
    BLE_CLIENT_EVENT_ERROR             ///< Error occurred
} ble_client_event_t;

/******************************************************************************/
/*                                 Structures                                 */
/******************************************************************************/

/**
 * @struct ble_client_config_t
 * @brief Configuration structure for BLE client
 */
typedef struct {
    esp_bd_addr_t target_server_address;                ///< MAC address of target server
    char target_device_name[BLE_MAX_DEVICE_NAME_LEN];  ///< Name of target server device
    uint32_t scan_timeout_ms;                          ///< Scan timeout in milliseconds
    int8_t min_rssi;                                   ///< Minimum RSSI to consider for connection
    bool auto_reconnect;                               ///< Enable automatic reconnection
    uint32_t reconnect_interval_ms;                    ///< Interval between reconnection attempts
    uint32_t connection_timeout_ms;                    ///< Connection attempt timeout
    bool enable_notifications;                         ///< Enable server notifications
    uint32_t read_interval_ms;                        ///< Interval for automatic data reading
} ble_client_config_t;

/**
 * @struct ble_client_stats_t
 * @brief Statistics for BLE client operations
 */
typedef struct {
    uint32_t scan_count;                ///< Number of scans performed
    uint32_t connection_attempts;       ///< Number of connection attempts
    uint32_t successful_connections;    ///< Number of successful connections
    uint32_t data_packets_received;     ///< Number of data packets received
    uint32_t data_packets_sent;        ///< Number of data packets sent
    uint32_t disconnections;           ///< Number of disconnections
    uint64_t total_uptime_ms;          ///< Total connected time
    uint64_t last_connection_time;     ///< Timestamp of last connection
} ble_client_stats_t;

/******************************************************************************/
/*                                 Callbacks                                  */
/******************************************************************************/

/**
 * @brief Callback for when client connects to a server
 * @param device_info Information about the connected device
 */
typedef void (*ble_client_connected_cb_t)(const ble_device_info_t* device_info);

/**
 * @brief Callback for when client disconnects from server
 * @param reason Disconnection reason code
 * @param was_planned True if disconnection was planned, false if unexpected
 */
typedef void (*ble_client_disconnected_cb_t)(int reason, bool was_planned);

/**
 * @brief Callback for when data is received from server
 * @param data Pointer to received data packet
 */
typedef void (*ble_client_data_received_cb_t)(const ble_data_packet_t* data);

/**
 * @brief Callback for when a target device is found during scanning
 * @param device_info Information about the found device
 * @param should_connect Output parameter - set to true to connect to this device
 */
typedef void (*ble_client_device_found_cb_t)(const ble_device_info_t* device_info, bool* should_connect);

/**
 * @brief Callback for authentication events
 * @param success True if authentication was successful
 * @param error_code Error code if authentication failed
 */
typedef void (*ble_client_auth_cb_t)(bool success, esp_err_t error_code);

/******************************************************************************/
/*                           NUEVOS CALLBACKS EXTENDIDOS                     */
/******************************************************************************/

/**
 * @brief Callback para cuando cualquier dispositivo BLE es detectado durante el escaneo
 * @param device_info Información del dispositivo encontrado
 * @param is_target True si es el dispositivo objetivo, false si es otro dispositivo
 */
typedef void (*ble_client_any_device_found_cb_t)(const ble_device_info_t* device_info, bool is_target);

/**
 * @brief Callback para cuando se inicia un escaneo
 * @param scan_duration_ms Duración del escaneo en milisegundos
 */
typedef void (*ble_client_scan_started_cb_t)(uint32_t scan_duration_ms);

/**
 * @brief Callback para cuando termina un escaneo
 * @param devices_found Número total de dispositivos encontrados
 * @param target_found True si se encontró el dispositivo objetivo
 */
typedef void (*ble_client_scan_completed_cb_t)(uint32_t devices_found, bool target_found);

/******************************************************************************/
/*                                BLE Client Class                            */
/******************************************************************************/

/**
 * @brief BLE Client class for connecting to and communicating with BLE servers
 * 
 * This class provides a high-level interface for BLE client operations including
 * scanning for devices, connecting to servers, authenticating, and exchanging data.
 * It supports automatic reconnection, security features, and statistics tracking.
 */
class BLEClient {
public:
    /**
     * @brief Constructs a new BLEClient object with default settings
     */
    BLEClient();

    /**
     * @brief Constructs a new BLEClient object with custom configuration
     * @param config Initial configuration for the client
     */
    BLEClient(const ble_client_config_t& config);

    /**
     * @brief Destroys the BLEClient object and cleans up resources
     */
    virtual ~BLEClient();

    /**
     * @brief Initializes the BLE client
     * 
     * Sets up the BLE client with the current configuration. Must be called
     * before any other client operations.
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t init();

    /**
     * @brief Starts scanning for BLE servers
     * 
     * Begins scanning for BLE devices matching the target device name.
     * Calls the device found callback when a matching device is discovered.
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t startScan();

    /**
     * @brief Stops the current scanning operation
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t stopScan();


    /**
     * @brief Sets the target device for scanning
     * 
     * @param server_address Name of the target device to search for
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t setMacTarget(const esp_bd_addr_t server_address);

    /**
     * @brief Connects to a specific BLE server
     * 
     * @param server_address MAC address of the server to connect to
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t connect(const esp_bd_addr_t server_address);

    /**
     * @brief Disconnects from the current server
     * 
     * @param planned True if this is a planned disconnection
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t disconnect(bool planned = true);

    /**
     * @brief Reads battery level from the connected server
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t readBatteryLevel();

    /**
     * @brief Reads custom data from the connected server
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t readCustomData();

    /**
     * @brief Writes custom data to the connected server
     * 
     * @param data Data string to write
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t writeCustomData(const char* data);

    /**
     * @brief Enables or disables notifications from the server
     * 
     * @param enable True to enable notifications, false to disable
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t setNotifications(bool enable);

    /**************************************************************************/
    /*                           Configuration Methods                        */
    /**************************************************************************/

    /**
     * @brief Updates the client configuration
     * 
     * @param config New configuration to apply
     * @return esp_err_t ESP_OK on success, error code otherwise
     * @note Call init() after changing configuration
     */
    esp_err_t setConfig(const ble_client_config_t& config);

    /**
     * @brief Gets the current client configuration
     * 
     * @return ble_client_config_t Current configuration
     */
    ble_client_config_t getConfig() const;

    /**
     * @brief Sets the target device name to search for
     * 
     * @param device_name Name of the target device
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t setTargetDevice(const char* device_name);

    /**
     * @brief Sets the minimum RSSI threshold for connections
     * 
     * @param min_rssi Minimum RSSI value in dBm
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t setMinRssi(int8_t min_rssi);

    /**************************************************************************/
    /*                            Callback Registration                       */
    /**************************************************************************/

    /**
     * @brief Registers callback for connection events
     * 
     * @param callback Function to call when connected to a server
     */
    void setConnectedCallback(ble_client_connected_cb_t callback);

    /**
     * @brief Registers callback for disconnection events
     * 
     * @param callback Function to call when disconnected from server
     */
    void setDisconnectedCallback(ble_client_disconnected_cb_t callback);

    /**
     * @brief Registers callback for data reception events
     * 
     * @param callback Function to call when data is received
     */
    void setDataReceivedCallback(ble_client_data_received_cb_t callback);

    /**
     * @brief Registers callback for device discovery events
     * 
     * @param callback Function to call when target device is found
     */
    void setDeviceFoundCallback(ble_client_device_found_cb_t callback);

    /**
     * @brief Registers callback for authentication events
     * 
     * @param callback Function to call for authentication events
     */
    void setAuthCallback(ble_client_auth_cb_t callback);

    /**************************************************************************/
    /*                         NUEVOS MÉTODOS EXTENDIDOS                     */
    /**************************************************************************/

    /**
     * @brief Registra callback para detectar CUALQUIER dispositivo BLE durante el escaneo
     * 
     * Este callback se ejecuta para TODOS los dispositivos BLE detectados,
     * no solo para el dispositivo objetivo.
     * 
     * @param callback Función a llamar cuando se detecte cualquier dispositivo
     */
    void setAnyDeviceFoundCallback(ble_client_any_device_found_cb_t callback);

    /**
     * @brief Registra callback para cuando se inicia un escaneo
     * 
     * @param callback Función a llamar cuando inicie un escaneo
     */
    void setScanStartedCallback(ble_client_scan_started_cb_t callback);

    /**
     * @brief Registra callback para cuando termina un escaneo
     * 
     * @param callback Función a llamar cuando termine un escaneo
     */
    void setScanCompletedCallback(ble_client_scan_completed_cb_t callback);

    /**
     * @brief Inicia un escaneo en modo "mostrar todos" sin filtro de dispositivo objetivo
     * 
     * En este modo, el cliente escaneará y reportará TODOS los dispositivos BLE
     * encontrados sin intentar conectarse a ninguno.
     * 
     * @param duration_ms Duración del escaneo en milisegundos
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t startDiscoveryScan(uint32_t duration_ms = 15000);

    /**
     * @brief Inicia un escaneo filtrado buscando solo el dispositivo objetivo
     * 
     * Este es el modo normal de escaneo que busca específicamente el dispositivo
     * configurado en target_device_name.
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t startTargetedScan();

    /**
     * @brief Establece el modo de escaneo (discovery vs targeted)
     * 
     * @param discovery_mode True para modo discovery (mostrar todos), false para modo targeted
     */
    void setScanMode(bool discovery_mode);

    /**
     * @brief Obtiene el número de dispositivos únicos encontrados en la sesión actual
     * 
     * @return uint32_t Número de dispositivos únicos detectados
     */
    uint32_t getUniqueDevicesFound() const;

    /**
     * @brief Limpia la lista de dispositivos encontrados
     */
    void clearDeviceList();

    /**
     * @brief Obtiene información de un dispositivo encontrado por índice
     * 
     * @param index Índice del dispositivo (0 a getUniqueDevicesFound()-1)
     * @return ble_device_info_t* Puntero a la info del dispositivo, nullptr si índice inválido
     */
    const ble_device_info_t* getFoundDevice(uint32_t index) const;

    /**************************************************************************/
    /*                              Status Methods                            */
    /**************************************************************************/

    /**
     * @brief Gets the current client state
     * 
     * @return ble_client_state_t Current state
     */
    ble_client_state_t getState() const;

    /**
     * @brief Checks if client is currently connected to a server
     * 
     * @return bool True if connected, false otherwise
     */
    bool isConnected() const;

    /**
     * @brief Checks if client is currently scanning
     * 
     * @return bool True if scanning, false otherwise
     */
    bool isScanning() const;

    /**
     * @brief Gets information about the currently connected device
     * 
     * @return ble_device_info_t* Pointer to device info, nullptr if not connected
     */
    const ble_device_info_t* getConnectedDevice() const;

    /**
     * @brief Gets the last received data packet
     * 
     * @return ble_data_packet_t* Pointer to last data, nullptr if no data received
     */
    const ble_data_packet_t* getLastData() const;

    /**
     * @brief Gets client operation statistics
     * 
     * @return ble_client_stats_t Current statistics
     */
    ble_client_stats_t getStats() const;

    /**
     * @brief Resets client statistics
     */
    void resetStats();

    /**************************************************************************/
    /*                              Utility Methods                           */
    /**************************************************************************/

    /**
     * @brief Gets a string representation of the current state
     * 
     * @return const char* State string
     */
    const char* getStateString() const;

    /**
     * @brief Gets connection quality based on RSSI
     * 
     * @return uint8_t Quality percentage (0-100%), 0 if not connected
     */
    uint8_t getConnectionQuality() const;

    /**
     * @brief Gets connection uptime in milliseconds
     * 
     * @return uint64_t Uptime in milliseconds, 0 if not connected
     */
    uint64_t getConnectionUptime() const;

    /**
     * @brief Performs a health check of the client
     * 
     * @return bool True if client is healthy, false otherwise
     */
    bool performHealthCheck();

protected:
    /**************************************************************************/
    /*                              Internal Methods                          */
    /**************************************************************************/

    /**
     * @brief Internal GAP callback handler
     * 
     * @param event GAP event type
     * @param param Event parameters
     */
    static void gapCallback(esp_gap_ble_cb_event_t event, esp_ble_gap_cb_param_t *param);

    /**
     * @brief Internal GATTC callback handler
     * 
     * @param event GATTC event type
     * @param gattc_if GATT client interface
     * @param param Event parameters
     */
    static void gattcCallback(esp_gattc_cb_event_t event, esp_gatt_if_t gattc_if, 
                             esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Verifies if a discovered device matches our target
     * 
     * @param scan_result Scan result data
     * @return bool True if device is verified as target
     */
    bool verifyTargetDevice(esp_ble_gap_cb_param_t *scan_result);

    /**
     * @brief Handles authentication with the server
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t authenticateWithServer();

    /**
     * @brief Internal task for automatic data reading
     * 
     * @param pvParameters Task parameters
     */
    static void dataReadTask(void *pvParameters);

    /**
     * @brief Internal task for reconnection attempts
     * 
     * @param pvParameters Task parameters
     */
    static void reconnectTask(void *pvParameters);

    /**
     * @brief Handles scan result events
     * 
     * @param param GAP callback parameters
     */
    void handleScanResult(esp_ble_gap_cb_param_t *param);

    /**
     * @brief Handles connection events
     * 
     * @param param GATTC callback parameters
     */
    void handleConnect(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles disconnection events
     * 
     * @param param GATTC callback parameters
     */
    void handleDisconnect(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles service found events
     * 
     * @param param GATTC callback parameters
     */
    void handleServiceFound(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles service discovery complete events
     * 
     * @param param GATTC callback parameters
     */
    void handleServiceDiscoveryComplete(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles characteristic found events
     * 
     * @param param GATTC callback parameters
     */
    void handleCharacteristicFound(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles all characteristics found events
     * 
     * @param param GATTC callback parameters
     */
    void handleAllCharacteristicsFound(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles characteristic read events
     * 
     * @param param GATTC callback parameters
     */
    void handleCharacteristicRead(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles characteristic write events
     * 
     * @param param GATTC callback parameters
     */
    void handleCharacteristicWrite(esp_ble_gattc_cb_param_t *param);

    /**
     * @brief Handles notification events
     * 
     * @param param GATTC callback parameters
     */
    void handleNotification(esp_ble_gattc_cb_param_t *param);

    /**************************************************************************/
    /*                       NUEVOS MÉTODOS PRIVADOS                         */
    /**************************************************************************/

    /**
     * @brief Agrega un dispositivo a la lista de encontrados (si no existe ya)
     * 
     * @param device_info Información del dispositivo a agregar
     * @return bool True si se agregó (nuevo), false si ya existía
     */
    bool addToFoundDevices(const ble_device_info_t* device_info);

    /**
     * @brief Verifica si un dispositivo ya está en la lista de encontrados
     * 
     * @param address Dirección MAC del dispositivo
     * @return bool True si ya está en la lista, false si es nuevo
     */
    bool isDeviceAlreadyFound(const esp_bd_addr_t address) const;

private:
    /**************************************************************************/
    /*                              Member Variables                          */
    /**************************************************************************/

    ble_client_config_t config_;                   ///< Client configuration
    ble_client_state_t state_;                     ///< Current client state
    ble_security_config_t security_config_;       ///< Security configuration
    
    esp_gatt_if_t gattc_if_;                      ///< GATT client interface
    uint16_t conn_id_;                            ///< Connection ID
    ble_device_info_t connected_device_;          ///< Currently connected device info
    ble_data_packet_t last_data_;                 ///< Last received data
    ble_client_stats_t stats_;                    ///< Operation statistics
    
    // Service and characteristic handles
    uint16_t service_start_handle_;               ///< Service start handle
    uint16_t service_end_handle_;                 ///< Service end handle
    uint16_t battery_char_handle_;                ///< Battery characteristic handle
    uint16_t custom_char_handle_;                 ///< Custom characteristic handle
    
    // Callbacks
    ble_client_connected_cb_t connected_cb_;      ///< Connection callback
    ble_client_disconnected_cb_t disconnected_cb_; ///< Disconnection callback
    ble_client_data_received_cb_t data_received_cb_; ///< Data received callback
    ble_client_device_found_cb_t device_found_cb_; ///< Device found callback
    ble_client_auth_cb_t auth_cb_;                ///< Authentication callback
    
    // Task handles
    TaskHandle_t data_read_task_handle_;          ///< Data reading task handle
    TaskHandle_t reconnect_task_handle_;          ///< Reconnection task handle
    
    // Synchronization
    SemaphoreHandle_t state_mutex_;               ///< State protection mutex
    
    // Timing
    uint64_t connection_start_time_;              ///< Connection start timestamp
    uint64_t last_data_time_;                     ///< Last data received timestamp
    
    // Static instance for callbacks
    static BLEClient* instance_;                  ///< Static instance for C callbacks

    /**************************************************************************/
    /*                       NUEVAS VARIABLES PRIVADAS                       */
    /**************************************************************************/

    // Callbacks extendidos
    ble_client_any_device_found_cb_t any_device_found_cb_;     ///< Callback para cualquier dispositivo
    ble_client_scan_started_cb_t scan_started_cb_;             ///< Callback de inicio de escaneo
    ble_client_scan_completed_cb_t scan_completed_cb_;         ///< Callback de fin de escaneo

    // Control de modo de escaneo
    bool discovery_mode_;                                       ///< True para modo discovery, false para targeted
    uint32_t current_scan_duration_;                          ///< Duración actual del escaneo
    uint64_t scan_start_time_;                                 ///< Tiempo de inicio del escaneo actual

    // Lista de dispositivos encontrados
    static const uint32_t MAX_FOUND_DEVICES = 50;
    ble_device_info_t found_devices_[MAX_FOUND_DEVICES];      ///< Lista de dispositivos encontrados
    uint32_t found_devices_count_;                            ///< Número de dispositivos únicos encontrados
    bool target_device_found_in_scan_;                        ///< Flag si se encontró el target en el escaneo actual
};