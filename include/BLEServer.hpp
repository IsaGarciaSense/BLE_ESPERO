/*******************************************************************************
 * @file BLEServer.hpp
 * @brief Contains declarations for BLE server functionality including advertising,
 * client management, service provisioning, and JSON command processing.
 *
 * @version 0.0.6
 * @date 2025-06-26
 * @author isa@sense-ai.co
 *******************************************************************************
 *******************************************************************************/

#pragma once

#include "BLEConfigs.hpp"

/**
 * @enum ble_server_state_t
 * @brief States specific to BLE server operations
 */
typedef enum {
    BLE_SERVER_IDLE,            ///< Server is idle
    BLE_SERVER_ADVERTISING,     ///< Server is advertising
    BLE_SERVER_CONNECTED,       ///< Server has clients connected
    BLE_SERVER_READY,          ///< Server is ready for operations
    BLE_SERVER_STOPPING       ///< Server is stopping
} ble_server_state_t;

/**
 * @enum ble_server_event_t
 * @brief Events that can be generated by the BLE server
 */
typedef enum {
    BLE_SERVER_EVENT_ADVERTISING_STARTED,   ///< Advertising started
    BLE_SERVER_EVENT_ADVERTISING_STOPPED,   ///< Advertising stopped
    BLE_SERVER_EVENT_CLIENT_CONNECTED,      ///< Client connected
    BLE_SERVER_EVENT_CLIENT_DISCONNECTED,   ///< Client disconnected
    BLE_SERVER_EVENT_CLIENT_AUTHENTICATED,  ///< Client authenticated
    BLE_SERVER_EVENT_DATA_WRITTEN,         ///< Data written by client
    BLE_SERVER_EVENT_DATA_READ,            ///< Data read by client
    BLE_SERVER_EVENT_JSON_COMMAND,         ///< JSON command received
    BLE_SERVER_EVENT_ERROR                 ///< Error occurred
} ble_server_event_t;

/**
 * @struct ble_server_config_t
 * @brief Configuration structure for BLE server
 */
typedef struct {
    char deviceName[BLE_MAX_DEVICE_NAME_LEN];     ///< Server device name
    uint32_t advertisingInterval;              ///< Advertising interval in milliseconds
    bool autoStartAdvertising;                   ///< Auto-start advertising on init
    uint32_t dataUpdateInterval;              ///< Interval for automatic data updates MS
    uint8_t maxClients;                          ///< Maximum number of simultaneous clients
    uint32_t clientTimeout;                   ///< Client inactivity timeout mS
    bool requireAuthentication;                   ///< Require client authentication
    bool enableNotifications;                     ///< Enable data notifications to clients
    bool enableJsonCommands;                     ///< Enable JSON command processing
    uint32_t maxJsonSize;                       ///< Maximum JSON command size
} ble_server_config_t;

/**
 * @struct ble_client_session_t
 * @brief Information about a connected client session
 */
typedef struct {
    uint16_t connID;                             ///< Connection ID
    esp_bd_addr_t address;                        ///< Client MAC address
    bool authenticated;                           ///< Authentication status
    uint64_t connectTime;                        ///< Connection timestamp
    uint64_t lastActivity;                       ///< Last activity timestamp
    uint32_t dataPacketsSent;                   ///< Data packets sent to this client
    uint32_t dataPacketsReceived;               ///< Data packets received from this client
    bool notificationsEnabled;                   ///< Notifications enabled for this client
    char jsonBuffer[512];                        ///< Buffer for accumulating JSON data
    uint16_t jsonBufferPos;                     ///< Current position in JSON buffer
} ble_client_session_t;

/**
 * @struct ble_server_stats_t
 * @brief Statistics for BLE server operations
 */
typedef struct {
    uint32_t advertisingCycles;                  ///< Number of advertising cycles
    uint32_t totalConnections;                   ///< Total connections received
    uint32_t currentClients;                     ///< Currently connected clients
    uint32_t successfulAuthentications;          ///< Successful authentications
    uint32_t failedAuthentications;             ///< Failed authentication attempts
    uint32_t dataPacketsSent;                   ///< Total data packets sent
    uint32_t dataPacketsReceived;               ///< Total data packets received
    uint32_t jsonCommandsProcessed;             ///< JSON commands processed
    uint32_t jsonCommandsFailed;                ///< Failed JSON commands
    uint64_t totalUptimeMs;                     ///< Total server uptime
    uint64_t startTime;                          ///< Server start timestamp
} ble_server_stats_t;

/**
 * @struct ble_server_status_t
 * @brief Current status of the BLE server
 */
typedef struct {
    ble_server_state_t state;                     ///< Current server state
    uint8_t batteryLevel;                        ///< Current battery level
    char customData[BLE_MAX_CUSTOM_DATA_LEN];    ///< Current custom data
    uint8_t connectedClients;                    ///< Number of connected clients
    bool advertisingActive;                      ///< Advertising status
    uint64_t lastUpdateTime;                    ///< Last data update timestamp
    bool jsonProcessingEnabled;                 ///< JSON processing status
} ble_server_status_t;

/**
 * @struct ble_json_command_t
 * @brief Structure for JSON command data
 */
typedef struct {
    uint16_t connId;                            ///< Connection ID that sent the command
    char commandJson[512];                      ///< JSON command string
    uint64_t timestamp;                          ///< Command timestamp
} ble_json_command_t;

/******************************************************************************/
/*                                 Callbacks                                  */
/******************************************************************************/

/**
 * @brief Callback for when a client connects to the server
 * @param connId Connection ID of the new client
 * @param clientInfo Information about the connected client
 */
typedef void (*ble_server_client_connected_cb_t)(uint16_t connId, 
                                                  const ble_device_info_t* clientInfo);

/**
 * @brief Callback for when a client disconnects from the server
 * @param connId Connection ID of the disconnected client
 * @param reason Disconnection reason
 */
typedef void (*ble_server_client_disconnected_cb_t)(uint16_t connId, int reason);

/**
 * @brief Callback for when data is written by a client
 * @param connId Connection ID of the client
 * @param data Data written by the client
 * @param length Length of the data
 */
typedef void (*ble_server_data_written_cb_t)(uint16_t connId, const uint8_t* data, 
                                              uint16_t length);

/**
 * @brief Callback for when data is read by a client
 * @param connId Connection ID of the client
 * @param characteristicType Type of characteristic read (battery, custom, etc.)
 */
typedef void (*ble_server_data_read_cb_t)(uint16_t connId, 
                                           const char* characteristicType);

/**
 * @brief Callback for client authentication events
 * @param connId Connection ID of the client
 * @param success True if authentication was successful
 * @param authData Authentication data provided by client
 */
typedef void (*ble_server_client_auth_cb_t)(uint16_t connId, bool success, 
                                             const char* authData);

/**
 * @brief Callback for advertising events
 * @param started True if advertising started, false if stopped
 * @param errorCode Error code if operation failed
 */
typedef void (*ble_server_advertising_cb_t)(bool started, esp_err_t errorCode);

/**
 * @brief Callback for JSON command processing
 * @param command Pointer to the JSON command structure
 * @return True if command was processed successfully
 */
typedef bool (*ble_server_json_command_cb_t)(const ble_json_command_t* command);

/******************************************************************************/
/*                                BLE Server Class                           */
/******************************************************************************/

/**
 * @brief BLE Server class for providing services to BLE clients
 * 
 * This class provides a high-level interface for BLE server operations including
 * advertising services, managing client connections, handling authentication,
 * serving data to connected clients, and processing JSON commands. It supports 
 * multiple simultaneous clients, automatic data updates, and comprehensive 
 * statistics tracking.
 */
class BLEServer {
public:
    /**
     * @brief Constructs a new BLEServer object with default settings
     */
    BLEServer();

    /**
     * @brief Constructs a new BLEServer object with custom configuration
     * @param config Initial configuration for the server
     */
    BLEServer(const ble_server_config_t& config);

    /**
     * @brief Destroys the BLEServer object and cleans up resources
     */
    virtual ~BLEServer();

    /**
     * @brief Initializes the BLE server
     * 
     * Sets up the BLE server with the current configuration, creates services
     * and characteristics. Must be called before any other server operations.
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t init();

    /**
     * @brief Starts advertising the BLE services
     * 
     * Makes the server discoverable and connectable to BLE clients.
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t startAdvertising();

    /**
     * @brief Stops advertising the BLE services
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t stopAdvertising();

    /**
     * @brief Updates the battery level value
     * 
     * @param level Battery level (0-100%)
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t setBatteryLevel(uint8_t level);

    /**
     * @brief Updates the custom data value
     * 
     * @param data Custom data string to set
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t setCustomData(const char* data);

    /**
     * @brief Sends a JSON response to a specific client
     * 
     * @param connId Connection ID of the target client
     * @param _jsonResponse JSON response string
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t sendJsonResponse(uint16_t connId, const char* _jsonResponse);

    /**
     * @brief Sends a JSON response to all connected clients
     * 
     * @param _jsonResponse JSON response string
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t sendJsonResponseToAll(const char* _jsonResponse);

    /**
     * @brief Sends notifications to all connected clients
     * 
     * Notifies all clients with notifications enabled about data updates.
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t notifyAllClients();

    /**
     * @brief Sends notification to a specific client
     * 
     * @param connId Connection ID of the target client
     * @param characteristicType Type of characteristic to notify ("battery" or "custom")
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t notifyClient(uint16_t connId, const char* characteristicType);

    /**
     * @brief Disconnects a specific client
     * 
     * @param connId Connection ID of the client to disconnect
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t disconnectClient(uint16_t connId);

    /**
     * @brief Disconnects all connected clients
     * 
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t disconnectAllClients();

    /**
     * @brief Updates the server configuration
     * 
     * @param config New configuration to apply
     * @return esp_err_t ESP_OK on success, error code otherwise
     * @note Call init() after changing configuration
     */
    esp_err_t setConfig(const ble_server_config_t& config);

    /**
     * @brief Gets the current server configuration
     * 
     * @return ble_server_config_t Current configuration
     */
    ble_server_config_t getConfig() const;

    /**
     * @brief Sets the device name for advertising
     * 
     * @param deviceName New device name
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t setDeviceName(const char* deviceName);

    /**
     * @brief Sets the advertising interval
     * 
     * @param intervalMs Advertising interval in milliseconds
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t setAdvertisingInterval(uint32_t intervalMs);

    /**
     * @brief Registers callback for client connection events
     * 
     * @param callback Function to call when a client connects
     */
    void setClientConnectedCallback(ble_server_client_connected_cb_t callback);

    /**
     * @brief Registers callback for client disconnection events
     * 
     * @param callback Function to call when a client disconnects
     */
    void setClientDisconnectedCallback(ble_server_client_disconnected_cb_t callback);

    /**
     * @brief Registers callback for data write events
     * 
     * @param callback Function to call when a client writes data
     */
    void setDataWrittenCallback(ble_server_data_written_cb_t callback);

    /**
     * @brief Registers callback for data read events
     * 
     * @param callback Function to call when a client reads data
     */
    void setDataReadCallback(ble_server_data_read_cb_t callback);

    /**
     * @brief Registers callback for client authentication events
     * 
     * @param callback Function to call for authentication events
     */
    void setClientAuthCallback(ble_server_client_auth_cb_t callback);

    /**
     * @brief Registers callback for advertising events
     * 
     * @param callback Function to call for advertising events
     */
    void setAdvertisingCallback(ble_server_advertising_cb_t callback);

    /**
     * @brief Registers callback for JSON command processing
     * 
     * @param callback Function to call for JSON commands
     */
    void setJsonCommandCallback(ble_server_json_command_cb_t callback);

    /**
     * @brief Gets the current server state
     * 
     * @return ble_server_state_t Current state
     */
    ble_server_state_t getState() const;

    /**
     * @brief Checks if server is currently advertising
     * 
     * @return bool True if advertising, false otherwise
     */
    bool isAdvertising() const;

    /**
     * @brief Checks if server has any connected clients
     * 
     * @return bool True if clients are connected, false otherwise
     */
    bool hasConnectedClients() const;

    /**
     * @brief Gets the number of currently connected clients
     * 
     * @return uint8_t Number of connected clients
     */
    uint8_t getConnectedClientCount() const;

    /**
     * @brief Gets current server status
     * 
     * @return ble_server_status_t Current server status
     */
    ble_server_status_t getStatus() const;

    /**
     * @brief Gets information about a specific client session
     * 
     * @param connId Connection ID of the client
     * @return ble_client_session_t* Pointer to client session, nullptr if not found
     */
    const ble_client_session_t* getClientSession(uint16_t connId) const;

    /**
     * @brief Gets list of all connected client sessions
     * 
     * @param _sessions Output array to store client sessions
     * @param maxSessions Maximum number of sessions to return
     * @return uint8_t Number of sessions returned
     */
    uint8_t getAllClientSessions(ble_client_session_t* _sessions, 
                                 uint8_t maxSessions) const;

    /**
     * @brief Gets server operation statistics
     * 
     * @return ble_server_stats_t Current statistics
     */
    ble_server_stats_t getStats() const;

    /**
     * @brief Resets server statistics
     */
    void resetStats();

    /**
     * @brief Gets a string representation of the current state
     * 
     * @return const char* State string
     */
    const char* getStateString() const;

    /**
     * @brief Gets server uptime in milliseconds
     * 
     * @return uint64_t Uptime in milliseconds
     */
    uint64_t getUptime() const;

    /**
     * @brief Performs a health check of the server
     * 
     * @return bool True if server is healthy, false otherwise
     */
    bool performHealthCheck();

    /**
     * @brief Gets memory usage information
     * 
     * @param _freeHeap Output parameter for free heap size
     * @param _minFreeHeap Output parameter for minimum free heap since boot
     */
    void getMemoryInfo(uint32_t* _freeHeap, uint32_t* _minFreeHeap) const;

    /**
     * @brief Generates a status report string
     * 
     * @param _buffer Output buffer for the report
     * @param bufferSize Size of the output buffer
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t generateStatusReport(char* _buffer, size_t bufferSize) const;

protected:
    /**
     * @brief Internal GAP callback handler
     * 
     * @param event GAP event type
     * @param param Event parameters
     */
    static void gapCallback(esp_gap_ble_cb_event_t event, esp_ble_gap_cb_param_t *param);

    /**
     * @brief Internal GATTS callback handler
     * 
     * @param event GATTS event type
     * @param gattsIf GATT server interface
     * @param param Event parameters
     */
    static void gattsCallback(esp_gatts_cb_event_t event, esp_gatt_if_t gattsIf, 
                             esp_ble_gatts_cb_param_t *param);

    /**
     * @brief Validates client authentication data
     * 
     * @param connId Connection ID of the client
     * @param authData Authentication data to validate
     * @return bool True if authentication is valid
     */
    bool validateClientAuthentication(uint16_t connId, const char* authData);

    /**
     * @brief Adds a new client session
     * 
     * @param connId Connection ID of the new client
     * @param _clientAddr Client MAC address
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t addClientSession(uint16_t connId, const esp_bd_addr_t _clientAddr);

    /**
     * @brief Removes a client session
     * 
     * @param connId Connection ID of the client to remove
     * @return esp_err_t ESP_OK on success, error code otherwise
     */
    esp_err_t removeClientSession(uint16_t connId);

    /**
     * @brief Processes JSON data received from a client
     * 
     * @param connId Connection ID of the client
     * @param data JSON data received
     * @param length Length of the data
     */
    void processJsonData(uint16_t connId, const uint8_t* data, uint16_t length);

    /**
     * @brief Processes a complete JSON command
     * 
     * @param connId Connection ID of the client
     * @param jsonString Complete JSON command string
     */
    void processJsonCommand(uint16_t connId, const char* jsonString);

    /**
     * @brief Internal task for automatic data updates
     * 
     * @param pvParameters Task parameters
     */
    static void dataUpdateTask(void *pvParameters);

    /**
     * @brief Internal task for client timeout monitoring
     * 
     * @param pvParameters Task parameters
     */
    static void clientTimeoutTask(void *pvParameters);

private:
    ble_server_config_t config_;                   ///< Server configuration
    ble_server_state_t state_;                     ///< Current server state
    ble_security_config_t securityConfig_;        ///< Security configuration
    
    esp_gatt_if_t gattsIf_;                       ///< GATT server interface
    ble_server_status_t status_;                  ///< Current server status
    ble_server_stats_t stats_;                    ///< Operation statistics
    
    // Service and characteristic handles
    uint16_t serviceHandle_;                      ///< Service handle
    uint16_t batteryCharHandle_;                  ///< Battery characteristic handle
    uint16_t customCharHandle_;                   ///< Custom characteristic handle
    uint16_t batteryDescrHandle_;                 ///< Battery descriptor handle
    uint16_t customDescrHandle_;                  ///< Custom descriptor handle
    
    // Client management
    static const uint8_t kMaxClientSessions = 8;
    ble_client_session_t clientSessions_[kMaxClientSessions]; ///< Array of client sessions
    uint8_t maxClients_;                          ///< Maximum number of clients
    
    // Callbacks
    ble_server_client_connected_cb_t clientConnectedCB_;     ///< Client connected callback
    ble_server_client_disconnected_cb_t clientDisconnectedCB_; ///< Client disconnected callback
    ble_server_data_written_cb_t dataWrittenCB_;             ///< Data written callback
    ble_server_data_read_cb_t dataReadCB_;                   ///< Data read callback
    ble_server_client_auth_cb_t clientAuthCB_;               ///< Client authentication callback
    ble_server_advertising_cb_t advertisingCB_;              ///< Advertising callback
    ble_server_json_command_cb_t jsonCommandCB_;             ///< JSON command callback
    
    // Task handles
    TaskHandle_t dataUpdateTaskHandle_;           ///< Data update task handle
    TaskHandle_t clientTimeoutTaskHandle_;        ///< Client timeout task handle
    
    // Synchronization
    SemaphoreHandle_t clientsMutex_;              ///< Client sessions protection mutex
    SemaphoreHandle_t dataMutex_;                 ///< Data protection mutex
    
    // Data storage
    uint8_t batteryLevel_;                        ///< Current battery level
    char customData_[BLE_MAX_CUSTOM_DATA_LEN];    ///< Current custom data
    
    // Static instance for callbacks
    static BLEServer* s_instance;                 ///< Static instance for C callbacks
};